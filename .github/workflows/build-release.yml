name: Build and Release APK

on:
  push:
    tags:
      - 'release-*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., release-9.3.3_3026)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version info
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag_name=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
            echo "version=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build Docker image
        run: |
          docker build -t telegram-build .

      - name: Build APKs and Bundles
        run: |
          docker run --rm -v "$PWD":/home/source telegram-build

      - name: List built files
        run: |
          echo "Built APK files:"
          find TMessagesProj/build/outputs/apk -name "*.apk" -type f
          echo "Built Bundle files:"
          find TMessagesProj/build/outputs/bundle -name "*.aab" -type f

      - name: Prepare release artifacts
        run: |
          mkdir -p release-artifacts

          # Copy APKs with descriptive names
          if [ -f "TMessagesProj/build/outputs/apk/afat/standalone/app.apk" ]; then
            cp "TMessagesProj/build/outputs/apk/afat/standalone/app.apk" "release-artifacts/telegram-${{ steps.version.outputs.version }}-standalone.apk"
          fi

          if [ -f "TMessagesProj/build/outputs/apk/afat/release/app.apk" ]; then
            cp "TMessagesProj/build/outputs/apk/afat/release/app.apk" "release-artifacts/telegram-${{ steps.version.outputs.version }}-playstore.apk"
          fi

          if [ -f "TMessagesProj/build/outputs/apk/afat/release/app-huawei.apk" ]; then
            cp "TMessagesProj/build/outputs/apk/afat/release/app-huawei.apk" "release-artifacts/telegram-${{ steps.version.outputs.version }}-huawei.apk"
          fi

          # Copy Bundles
          if [ -f "TMessagesProj/build/outputs/bundle/bundleAfat_SDK23Release/TMessagesProj_App-bundleAfat_SDK23-release.aab" ]; then
            cp "TMessagesProj/build/outputs/bundle/bundleAfat_SDK23Release/TMessagesProj_App-bundleAfat_SDK23-release.aab" "release-artifacts/telegram-${{ steps.version.outputs.version }}-bundle-sdk23.aab"
          fi

          if [ -f "TMessagesProj/build/outputs/bundle/bundleAfatRelease/TMessagesProj_App-bundleAfat-release.aab" ]; then
            cp "TMessagesProj/build/outputs/bundle/bundleAfatRelease/TMessagesProj_App-bundleAfat-release.aab" "release-artifacts/telegram-${{ steps.version.outputs.version }}-bundle.aab"
          fi

          echo "Release artifacts prepared:"
          ls -la release-artifacts/

      - name: Generate checksums
        run: |
          cd release-artifacts
          sha256sum *.apk *.aab > checksums.txt
          echo "Checksums generated:"
          cat checksums.txt

      - name: Create Release Notes
        id: release_notes
        run: |
          cat > release_notes.md << EOF
          # iTelegram ${{ steps.version.outputs.version }}

          This is a reproducible build of iTelegram based on the official Telegram source code.

          ## Build Information
          - **Version**: ${{ steps.version.outputs.version }}
          - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - **Commit**: ${GITHUB_SHA:0:8}

          ## Available Downloads

          ### APK Files (Direct Installation)
          - **telegram-${{ steps.version.outputs.version }}-standalone.apk**: Direct download version (telegram.org/android)
          - **telegram-${{ steps.version.outputs.version }}-playstore.apk**: Google Play Store version
          - **telegram-${{ steps.version.outputs.version }}-huawei.apk**: Huawei AppGallery version

          ### Bundle Files (For Stores)
          - **telegram-${{ steps.version.outputs.version }}-bundle.aab**: Play Store bundle
          - **telegram-${{ steps.version.outputs.version }}-bundle-sdk23.aab**: Play Store bundle (SDK 23)

          ## Verification

          To verify these builds are reproducible, follow the instructions in the repository README:

          1. Clone the repository: \`git clone https://github.com/${{ github.repository }}.git\`
          2. Checkout this tag: \`git checkout ${{ steps.version.outputs.version }}\`
          3. Build using Docker: \`docker build -t telegram-build . && docker run --rm -v "\$PWD":/home/source telegram-build\`
          4. Compare the generated APK with the one from this release

          ## Checksums

          \`\`\`
          $(cat release-artifacts/checksums.txt)
          \`\`\`

          **Note**: This is an unofficial build. Use at your own risk.
          EOF

      - name: Create Pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: iTelegram ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          files: |
            release-artifacts/*.apk
            release-artifacts/*.aab
            release-artifacts/checksums.txt
          prerelease: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Build verification job
  verify-build:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-artifacts
          path: downloaded-artifacts/
        continue-on-error: true

      - name: Verify checksums
        run: |
          if [ -d "downloaded-artifacts" ]; then
            cd downloaded-artifacts
            if [ -f "checksums.txt" ]; then
              echo "Verifying checksums..."
              sha256sum -c checksums.txt
            else
              echo "No checksums file found"
            fi
          else
            echo "No artifacts to verify"
          fi
        continue-on-error: true
